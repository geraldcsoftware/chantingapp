// <auto-generated />
using System;
using ChantingApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChantingApp.DbMigrations.Migrations
{
    [DbContext(typeof(ChantsDbContext))]
    [Migration("20221206055130_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChantingApp.Persistence.Chant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Chants", (string)null);
                });

            modelBuilder.Entity("ChantingApp.Persistence.ChantStream", b =>
                {
                    b.Property<Guid>("ChantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("ChantId");

                    b.ToTable("ChantStreams", (string)null);
                });

            modelBuilder.Entity("ChantingApp.Persistence.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ChantingApp.Persistence.Chant", b =>
                {
                    b.OwnsOne("ChantingApp.Persistence.ChantVisualDisplay", "VisualPreset", b1 =>
                        {
                            b1.Property<Guid>("ChantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("BackgroundImageUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Color")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PresetType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ChantId");

                            b1.ToTable("Chants");

                            b1.ToJson("VisualPreset");

                            b1.WithOwner()
                                .HasForeignKey("ChantId");
                        });

                    b.Navigation("VisualPreset")
                        .IsRequired();
                });

            modelBuilder.Entity("ChantingApp.Persistence.ChantStream", b =>
                {
                    b.HasOne("ChantingApp.Persistence.Chant", null)
                        .WithOne("Stream")
                        .HasForeignKey("ChantingApp.Persistence.ChantStream", "ChantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChantingApp.Persistence.Chant", b =>
                {
                    b.Navigation("Stream");
                });
#pragma warning restore 612, 618
        }
    }
}
